/* Generated by Cython 3.0.12 */

#ifndef __PYX_HAVE__YanAPI
#define __PYX_HAVE__YanAPI

#include "Python.h"

/* "YanAPI.pyx":4357
 * 
 * 
 * cpdef public enum GamepadKey:             # <<<<<<<<<<<<<<
 *     L1 = 1
 *     L2 = 2
 */
enum GamepadKey {
  L1 = 1,
  L2 = 2,
  R1 = 3,
  R2 = 4,
  A = 5,
  B = 6,
  X = 7,
  Y = 8,
  DPAD_UP = 9,
  DPAD_DOWN = 10,
  DPAD_LEFT = 11,
  DPAD_RIGHT = 12,
  DPAD_UP_LEFT = 13,
  DPAD_UP_RIGHT = 14,
  DPAD_DOWN_LEFT = 15,
  DPAD_DOWN_RIGHT = 16,
  L_STICK = 17,
  R_STICK = 18,
  L_STICK_UP = 19,
  L_STICK_DOWN = 20,
  L_STICK_LEFT = 21,
  L_STICK_RIGHT = 22,
  R_STICK_UP = 23,
  R_STICK_DOWN = 24,
  R_STICK_LEFT = 25,
  R_STICK_RIGHT = 26,
  BT = 27,
  START = 28,
  POWER = 29,
  RESERVE = 30
};

#ifndef __PYX_HAVE_API__YanAPI

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(_T) _T
#endif

__PYX_EXTERN_C PyObject *get_ip_address(PyObject *);
__PYX_EXTERN_C PyObject *yan_api_init(PyObject *);
__PYX_EXTERN_C PyObject *get_robot_battery_info(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_robot_battery_value(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_robot_fall_management_state(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *set_robot_fall_management_state(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_robot_language(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *set_robot_language(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_button_led_color_value(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_button_led_mode_value(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_eye_led_color_value(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_eye_led_mode_value(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_robot_led(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *set_robot_led(PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *sync_set_led(PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_robot_version_info_value(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_robot_version_info(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_robot_mode(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_robot_volume_value(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_robot_volume(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *set_robot_volume_value(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *set_robot_volume(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_joystick_buttons_list(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_joystick_buttons_list_value(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *delete_media_music(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_media_music_state(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *upload_media_music(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *stop_play_music(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_media_music_list(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *delete_motion(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_current_motion_play_state(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_current_layer_motion_play_state(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *upload_motion(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_motion_list_value(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_motion_list(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *control_motion_gait_impl(PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_motion_gait_state(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *exit_motion_gait(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_aprilTag_recognition_status(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *stop_aprilTag_recognition(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_QR_code_recognition_status(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *stop_QR_code_recognition(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_object_tracking_status(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *stop_object_tracking(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_servo_angle_value(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_servos_angles(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *set_servos_angles_layers(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_servos_mode(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *set_servos_mode(PyObject *, PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *sensor_calibration(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_sensors_list_value(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_sensors_list(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_sensors_environment_value(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_sensors_environment(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_sensors_gyro(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_sensors_infrared_value(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_sensors_pressure_value(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_sensors_touch_value(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_sensors_ultrasonic_value(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *stop_voice_asr(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_voice_asr_state(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *start_voice_asr_impl(PyObject *, PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *sync_do_voice_asr_value(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *sync_do_voice_asr(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *delete_voice_asr_offline_syntax(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_voice_asr_offline_syntax(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *create_voice_asr_offline_syntax(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *update_voice_asr_offline_syntax(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_voice_asr_offline_syntax_grammars(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *stop_voice_iat(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_voice_iat(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *sync_do_voice_iat_value(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *sync_do_voice_iat(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *stop_voice_tts(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_voice_tts_state_impl(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *start_voice_tts_impl(PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *sync_do_tts_impl(PyObject *, PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_visual_task_result(PyObject *, PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *sync_do_face_recognition_value(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *sync_do_face_recognition(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *sync_do_gesture_recognition(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *sync_do_color_recognition(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *sync_do_object_recognition(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *do_face_entry(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *delete_vision_photo(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_vision_photo_list(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *delete_vision_photo_sample(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_vision_photo_samples(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *upload_vision_photo_sample(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *close_vision_stream(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_vision_tags(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *set_vision_tag(PyObject *, PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *do_visions_visible(PyObject *, PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *show_visions_result(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *stop_subscribe_motion(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *stop_subscribe_motion_gait(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *stop_subscribe_vision(PyObject *, PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *stop_subscribe_voice_asr(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *stop_subscribe_voice_iat(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *stop_subscribe_voice_tts(PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *start_subscribe_voice_tts_impl(PyObject *, PyObject *, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *get_gamepad_keymap(int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *set_gamepad_keymap_impl(enum GamepadKey, PyObject *, int, int __pyx_skip_dispatch);
__PYX_EXTERN_C PyObject *reset_gamepad_keymap(enum GamepadKey, int __pyx_skip_dispatch);

#endif /* !__PYX_HAVE_API__YanAPI */

/* WARNING: the interface of the module init function changed in CPython 3.5. */
/* It now returns a PyModuleDef instance instead of a PyModule instance. */

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initYanAPI(void);
#else
/* WARNING: Use PyImport_AppendInittab("YanAPI", PyInit_YanAPI) instead of calling PyInit_YanAPI directly from Python 3.5 */
PyMODINIT_FUNC PyInit_YanAPI(void);

#if PY_VERSION_HEX >= 0x03050000 && (defined(__GNUC__) || defined(__clang__) || defined(_MSC_VER) || (defined(__cplusplus) && __cplusplus >= 201402L))
#if defined(__cplusplus) && __cplusplus >= 201402L
[[deprecated("Use PyImport_AppendInittab(\"YanAPI\", PyInit_YanAPI) instead of calling PyInit_YanAPI directly.")]] inline
#elif defined(__GNUC__) || defined(__clang__)
__attribute__ ((__deprecated__("Use PyImport_AppendInittab(\"YanAPI\", PyInit_YanAPI) instead of calling PyInit_YanAPI directly."), __unused__)) __inline__
#elif defined(_MSC_VER)
__declspec(deprecated("Use PyImport_AppendInittab(\"YanAPI\", PyInit_YanAPI) instead of calling PyInit_YanAPI directly.")) __inline
#endif
static PyObject* __PYX_WARN_IF_PyInit_YanAPI_INIT_CALLED(PyObject* res) {
  return res;
}
#define PyInit_YanAPI() __PYX_WARN_IF_PyInit_YanAPI_INIT_CALLED(PyInit_YanAPI())
#endif
#endif

#endif /* !__PYX_HAVE__YanAPI */

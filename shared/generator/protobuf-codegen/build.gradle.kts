import com.google.protobuf.gradle.GenerateProtoTask
import com.google.protobuf.gradle.id
import org.jetbrains.kotlin.gradle.ExperimentalWasmDsl
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    `java-library`
    alias(libs.plugins.kotlin.multiplatform)
//    alias(libs.plugins.android.library)
    alias(libs.plugins.protobuf)
}


kotlin {
    jvmToolchain(17)
    applyDefaultHierarchyTemplate()
    js(IR) {
        browser()
        binaries.executable()
    }
//    @OptIn(ExperimentalWasmDsl::class)
//    wasmJs {
//        browser()
//    }
//    androidTarget()
    jvm()

    // Apple
    iosX64()
    iosArm64()
    iosSimulatorArm64()
    tvosX64()
    tvosArm64()
    macosArm64()
    macosX64()
    // Apple
    linuxX64()
    linuxArm64()


    sourceSets {
        commonMain {
            dependencies {
                // Add dependencies required by the generated Kotlin code
                api(libs.pbandk.runtime)
                implementation(project.dependencies.enforcedPlatform(libs.kotlinx.rpc.bom))
                implementation(libs.kotlinx.rpc.grpc.core)
            }
        }
    }
}
dependencies {
    // This is needed for includes, ref: https://github.com/google/protobuf-gradle-plugin/issues/41#issuecomment-143884188
    compileOnly(libs.google.protobuf.java)

}

protobuf {
    protoc {
        artifact = libs.google.protoc.get().toString()
    }
    plugins {
        id("airobot") {
            artifact = libs.pbandk.gen.get().toString()
        }
    }
    generateProtoTasks {
        ofSourceSet("main").forEach { task ->
            task.builtins {
                this.remove(GenerateProtoTask.PluginOptions("java"))
            }
            task.plugins {
                id("airobot") {
                    // Publish the code generated by pbandk as part of the `:protobuf-codegen` project's
                    // `commonMain` source set. This allows other Kotlin Multiplatform sub-projects to consume the
                    // pbandk-generated Kotlin code using a regular gradle project dependency.
                    val outputDir = task.getOutputDir(this)
                    project.kotlin.sourceSets.commonMain.configure {
                        // `builtBy` ensures that gradle will automatically run the `generateProto` task before trying
                        // to compile the generated Kotlin code
                        kotlin.srcDir(project.files(outputDir).builtBy(task))
                    }
                    option("log=debug")
                    option("kotlin_package=com.airobot.protocol.pb")


                    option("kotlin_service_gen=${serviceGen.layout.
                    buildDirectory.get()
                    }/libs/${projects.shared.generator.serviceGen.name}.jar|com.airobot.protocol.Generator")
                }
            }
        }
    }
}
val serviceGen = project(projects.shared.generator.serviceGen.path)
tasks {
    named("compileJava"){
        // The protobuf gradle plugin requires this project to apply the `java-library` plugin. But since we're only
        // generating Kotlin code, we need to disable the `compileJava` task. Otherwise gradle will complain that there
        // is no Java code available to compile.
        enabled = false
    }
    afterEvaluate {
        withType<KotlinCompile>{
            serviceGen.afterEvaluate {
                dependsOn(serviceGen.tasks.named("jar"))
            }
        }
    }

}

// 需要添加一个任务, 当kotlin编译的时候, 需要执行service-gen中的jar生成jar包
//android {
//    namespace = "com.airobot.protocol"
//    compileSdk = 34
//    defaultConfig {
//        minSdk = 24
//    }
//}
package com.airobot.web.utils

import js.objects.jso
import mui.material.PaletteMode
import mui.material.styles.CommonColors
import mui.material.styles.MixinsOptions
import mui.material.styles.PaletteColor
import mui.material.styles.PaletteOptions
import mui.material.styles.SimplePaletteColorOptions
import mui.material.styles.Theme
import mui.material.styles.ThemeOptions
import mui.material.styles.TransitionsOptions
import mui.material.styles.TypeAction
import mui.material.styles.TypeBackground
import mui.material.styles.TypeText
import mui.material.styles.TypographyOptions
import mui.material.styles.createTheme
import mui.system.BreakpointsOptions
import mui.system.Direction
import mui.system.ShapeOptions
import web.cssom.AccentColor
import web.cssom.AlignContent
import web.cssom.AlignItems
import web.cssom.AlignSelf
import web.cssom.AlignTracks
import web.cssom.AnimationComposition
import web.cssom.AnimationDelay
import web.cssom.AnimationDirection
import web.cssom.AnimationDuration
import web.cssom.AnimationFillMode
import web.cssom.AnimationIterationCount
import web.cssom.AnimationRange
import web.cssom.Appearance
import web.cssom.BackdropFilter
import web.cssom.Background
import web.cssom.BackgroundPosition
import web.cssom.Border
import web.cssom.BorderBlock
import web.cssom.BorderBlockEnd
import web.cssom.BorderBlockStart
import web.cssom.BorderBottom
import web.cssom.BorderColor
import web.cssom.BorderImage
import web.cssom.BorderInline
import web.cssom.BorderInlineEnd
import web.cssom.BorderInlineStart
import web.cssom.BorderLeft
import web.cssom.BorderRadius
import web.cssom.Color
import web.cssom.px

// Do not edit this file, The script works fine and does not require any modification
private val lightPalette = object : ThemeOptions {
    override var breakpoints: BreakpointsOptions? = null
    override var components: dynamic = jso {
        this["MuiOutlinedInput"] = jso {
            this.styleOverrides = jso {
                this.root = jso {
                    this.borderRadius = 4.px
                }
            }
        }
    }
    override var direction: Direction? = null
    override var mixins: MixinsOptions? = null
    override var palette: PaletteOptions? = object : PaletteOptions {
        override var mode: PaletteMode? = PaletteMode.light
        override var primary: dynamic = jso {
            main = Color("#1976d2")
            light = Color("#42a5f5")
            dark = Color("#1565c0")
            contrastText = Color("#ffffff")
        }
        override var secondary: dynamic = jso {
            main = Color("#9c27b0")
            light = Color("#ba68c8")
            dark = Color("#7b1fa2")
            contrastText = Color("#ffffff")
        }
        override var success: dynamic = jso {
            main = Color("#4caf50")
            light = Color("#81c784")
            dark = Color("#388e3c")
            contrastText = Color("#ffffff")
        }
        override var warning: dynamic = jso {
            main = Color("#ff9800")
            light = Color("#ffb74d")
            dark = Color("#f57c00")
            contrastText = Color("#ffffff")
        }
        override var error: dynamic = jso {
            main = Color("#f44336")
            light = Color("#e57373")
            dark = Color("#d32f2f")
            contrastText = Color("#ffffff")
        }
        override var info: dynamic = jso {
            main = Color("#2196f3")
            light = Color("#64b5f6")
            dark = Color("#1976d2")
            contrastText = Color("#ffffff")
        }
        override var text: TypeText? = object : TypeText {
            override var primary: Color = Color("#000000")
            override var secondary: Color = Color("#757575")
            override var disabled: Color = Color("#bdbdbd")
        }
        override var action: TypeAction? = object : TypeAction {
            override var activatedOpacity: Number = 0.12
            override var active: Color = Color("#000000")
            override var hover: Color = Color("#f5f5f5")
            override var hoverOpacity: Number = 0.04
            override var selected: Color = Color("#e0e0e0")
            override var selectedOpacity: Number = 0.08
            override var disabled: Color = Color("#bdbdbd")
            override var disabledBackground: Color = Color("#e0e0e0")
            override var disabledOpacity: Number = 0.38
            override var focus: Color = Color("#000000")
            override var focusOpacity: Number = 0.12
        }
        override var background: TypeBackground? = object : TypeBackground {
            override var default: String = "#ffffff"
            override var paper: String = "#f5f5f5"
        }
        override var divider: String? = "#e0e0e0"
        override var common: CommonColors? = object : CommonColors {
            override var black: Color = Color("#000000")
            override var white: Color = Color("#ffffff")
        }
        override var grey: dynamic = jso {
            this["50"] = Color("#fafafa")
            this["100"] = Color("#f5f5f5")
            this["200"] = Color("#eeeeee")
            this["300"] = Color("#e0e0e0")
            this["400"] = Color("#bdbdbd")
            this["500"] = Color("#9e9e9e")
            this["600"] = Color("#757575")
            this["700"] = Color("#616161")
            this["800"] = Color("#424242")
            this["900"] = Color("#212121")
        }
        override var tonalOffset: Double? = 0.2
        override var contrastThreshold: Number? = 3
        override var getContrastText: ((String) -> String)? = { _ -> "#000000" }
    }
    override var shadows: dynamic = Array(25) { "none" }
    override var typography: TypographyOptions? = TypographyOptions {
        // 添加基本的typography配置
        val dyna = asDynamic()
        dyna.fontFamily = "Roboto, sans-serif"
        dyna.h1 = jso {
            this.fontWeight = 500
            this.fontSize = "35px"
            this.letterSpacing = "-0.24px"
        }
        dyna.h2 = jso {
            this.fontWeight = 500
            this.fontSize = "29px"
            this.letterSpacing = "-0.24px"
        }
        dyna.h3 = jso {
            this.fontWeight = 500
            this.fontSize = "24px"
            this.letterSpacing = "-0.06px"
        }
        dyna.h4 = jso {
            this.fontWeight = 500
            this.fontSize = "20px"
            this.letterSpacing = "-0.06px"
        }
        dyna.h5 = jso {
            this.fontWeight = 500
            this.fontSize = "16px"
            this.letterSpacing = "-0.05px"
        }
        dyna.h6 = jso {
            this.fontWeight = 500
            this.fontSize = "14px"
            this.letterSpacing = "-0.05px"
        }
        dyna.subtitle1 = jso {
            this.fontSize = "16px"
            this.fontWeight = 400
            this.letterSpacing = "-0.05px"
        }
        dyna.subtitle2 = jso {
            this.fontSize = "14px"
            this.fontWeight = 500
            this.letterSpacing = "-0.05px"
        }
        dyna.body1 = jso {
            this.fontSize = "16px"
            this.fontWeight = 400
            this.letterSpacing = "-0.05px"
        }
        dyna.body2 = jso {
            this.fontSize = "14px"
            this.fontWeight = 400
            this.letterSpacing = "-0.05px"
        }
        dyna.button = jso {
            this.fontSize = "14px"
        }
        dyna.caption = jso {
            this.fontSize = "12px"
        }
        dyna.overline = jso {
            this.fontSize = "10px"
        }

    }

    override var unstable_strictMode: Boolean? = false
    override var unstable_sxConfig: dynamic = null
    override var zIndex: dynamic = null
    override var shape: ShapeOptions? = object : ShapeOptions {
        override var borderRadius: BorderRadius = 4.px
    }
    override var spacing: dynamic = null
    override var transitions: TransitionsOptions? = null
}

private val darkPalette = object : ThemeOptions {
    override var breakpoints: BreakpointsOptions? = null
    override var components: dynamic = jso {
        this["MuiOutlinedInput"] = jso {
            this.styleOverrides = jso {
                this.root = jso {
                    this.borderRadius = 4.px
                }
            }
        }
    }
    override var direction: Direction? = null
    override var mixins: MixinsOptions? = null
    override var palette: PaletteOptions? = object : PaletteOptions {
        override var mode: PaletteMode? = PaletteMode.dark
        override var primary: dynamic = jso {
            main = Color("#90caf9")
            light = Color("#e3f2fd")
            dark = Color("#42a5f5")
            contrastText = Color("#000000")
        }
        override var secondary: dynamic = jso {
            main = Color("#ce93d8")
            light = Color("#f3e5f5")
            dark = Color("#ab47bc")
            contrastText = Color("#000000")
        }
        override var success: dynamic = jso {
            main = Color("#66bb6a")
            light = Color("#e8f5e9")
            dark = Color("#388e3c")
            contrastText = Color("#000000")
        }
        override var warning: dynamic = jso {
            main = Color("#ffa726")
            light = Color("#fff3e0")
            dark = Color("#f57c00")
            contrastText = Color("#000000")
        }
        override var error: dynamic = jso {
            main = Color("#f44336")
            light = Color("#e57373")
            dark = Color("#d32f2f")
            contrastText = Color("#ffffff")
        }
        override var info: dynamic = jso {
            main = Color("#29b6f6")
            light = Color("#e1f5fe")
            dark = Color("#0288d1")
            contrastText = Color("#000000")
        }
        override var text: TypeText? = object : TypeText {
            override var primary: Color = Color("#ffffff")
            override var secondary: Color = Color("#b0bec5")
            override var disabled: Color = Color("#78909c")
        }
        override var action: TypeAction? = object : TypeAction {
            override var activatedOpacity: Number = 0.12
            override var active: Color = Color("#ffffff")
            override var hover: Color = Color("#424242")
            override var hoverOpacity: Number = 0.08
            override var selected: Color = Color("#212121")
            override var selectedOpacity: Number = 0.16
            override var disabled: Color = Color("#757575")
            override var disabledBackground: Color = Color("#424242")
            override var disabledOpacity: Number = 0.38
            override var focus: Color = Color("#ffffff")
            override var focusOpacity: Number = 0.12
        }
        override var background: TypeBackground? = object : TypeBackground {
            override var default: String = "#121212"
            override var paper: String = "#212121"
        }
        override var divider: String? = "#424242"
        override var common: CommonColors? = object : CommonColors {
            override var black: Color = Color("#000000")
            override var white: Color = Color("#ffffff")
        }
        override var grey: dynamic = jso {
            this["50"] = Color("#fafafa")
            this["100"] = Color("#f5f5f5")
            this["200"] = Color("#eeeeee")
            this["300"] = Color("#e0e0e0")
            this["400"] = Color("#bdbdbd")
            this["500"] = Color("#9e9e9e")
            this["600"] = Color("#757575")
            this["700"] = Color("#616161")
            this["800"] = Color("#424242")
            this["900"] = Color("#212121")
        }
        override var tonalOffset: Double? = 0.2
        override var contrastThreshold: Number? = 3
        override var getContrastText: ((String) -> String)? = { _ -> "#ffffff" }
    }
    override var shadows: dynamic = Array(25) { "none" }
    override var typography: TypographyOptions? = TypographyOptions {
        // 添加基本的typography配置
    }

    override var unstable_strictMode: Boolean? = false
    override var unstable_sxConfig: dynamic = null
    override var zIndex: dynamic = null
    override var shape: ShapeOptions? = object : ShapeOptions {
        override var borderRadius: BorderRadius = 4.px
    }
    override var spacing: dynamic = null
    override var transitions: TransitionsOptions? = null
}

val lightTheme: Theme = createTheme(lightPalette)
val darkTheme: Theme = createTheme(darkPalette)